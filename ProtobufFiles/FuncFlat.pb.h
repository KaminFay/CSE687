// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FuncFlat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_FuncFlat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_FuncFlat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_FuncFlat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_FuncFlat_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FuncFlat_2eproto;
class FlatFunc;
class FlatFuncDefaultTypeInternal;
extern FlatFuncDefaultTypeInternal _FlatFunc_default_instance_;
class returnData;
class returnDataDefaultTypeInternal;
extern returnDataDefaultTypeInternal _returnData_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::FlatFunc* Arena::CreateMaybeMessage<::FlatFunc>(Arena*);
template<> ::returnData* Arena::CreateMaybeMessage<::returnData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class FlatFunc PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FlatFunc) */ {
 public:
  inline FlatFunc() : FlatFunc(nullptr) {};
  virtual ~FlatFunc();

  FlatFunc(const FlatFunc& from);
  FlatFunc(FlatFunc&& from) noexcept
    : FlatFunc() {
    *this = ::std::move(from);
  }

  inline FlatFunc& operator=(const FlatFunc& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlatFunc& operator=(FlatFunc&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlatFunc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlatFunc* internal_default_instance() {
    return reinterpret_cast<const FlatFunc*>(
               &_FlatFunc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FlatFunc& a, FlatFunc& b) {
    a.Swap(&b);
  }
  inline void Swap(FlatFunc* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlatFunc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlatFunc* New() const final {
    return CreateMaybeMessage<FlatFunc>(nullptr);
  }

  FlatFunc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlatFunc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlatFunc& from);
  void MergeFrom(const FlatFunc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlatFunc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FlatFunc";
  }
  protected:
  explicit FlatFunc(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FuncFlat_2eproto);
    return ::descriptor_table_FuncFlat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionNameFieldNumber = 1,
    kDllNameFieldNumber = 2,
    kDllPathFieldNumber = 3,
  };
  // string functionName = 1;
  void clear_functionname();
  const std::string& functionname() const;
  void set_functionname(const std::string& value);
  void set_functionname(std::string&& value);
  void set_functionname(const char* value);
  void set_functionname(const char* value, size_t size);
  std::string* mutable_functionname();
  std::string* release_functionname();
  void set_allocated_functionname(std::string* functionname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_functionname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_functionname(
      std::string* functionname);
  private:
  const std::string& _internal_functionname() const;
  void _internal_set_functionname(const std::string& value);
  std::string* _internal_mutable_functionname();
  public:

  // string dllName = 2;
  void clear_dllname();
  const std::string& dllname() const;
  void set_dllname(const std::string& value);
  void set_dllname(std::string&& value);
  void set_dllname(const char* value);
  void set_dllname(const char* value, size_t size);
  std::string* mutable_dllname();
  std::string* release_dllname();
  void set_allocated_dllname(std::string* dllname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dllname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dllname(
      std::string* dllname);
  private:
  const std::string& _internal_dllname() const;
  void _internal_set_dllname(const std::string& value);
  std::string* _internal_mutable_dllname();
  public:

  // string dllPath = 3;
  void clear_dllpath();
  const std::string& dllpath() const;
  void set_dllpath(const std::string& value);
  void set_dllpath(std::string&& value);
  void set_dllpath(const char* value);
  void set_dllpath(const char* value, size_t size);
  std::string* mutable_dllpath();
  std::string* release_dllpath();
  void set_allocated_dllpath(std::string* dllpath);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dllpath();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dllpath(
      std::string* dllpath);
  private:
  const std::string& _internal_dllpath() const;
  void _internal_set_dllpath(const std::string& value);
  std::string* _internal_mutable_dllpath();
  public:

  // @@protoc_insertion_point(class_scope:FlatFunc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr functionname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dllname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dllpath_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FuncFlat_2eproto;
};
// -------------------------------------------------------------------

class returnData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:returnData) */ {
 public:
  inline returnData() : returnData(nullptr) {};
  virtual ~returnData();

  returnData(const returnData& from);
  returnData(returnData&& from) noexcept
    : returnData() {
    *this = ::std::move(from);
  }

  inline returnData& operator=(const returnData& from) {
    CopyFrom(from);
    return *this;
  }
  inline returnData& operator=(returnData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const returnData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const returnData* internal_default_instance() {
    return reinterpret_cast<const returnData*>(
               &_returnData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(returnData& a, returnData& b) {
    a.Swap(&b);
  }
  inline void Swap(returnData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(returnData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline returnData* New() const final {
    return CreateMaybeMessage<returnData>(nullptr);
  }

  returnData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<returnData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const returnData& from);
  void MergeFrom(const returnData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(returnData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "returnData";
  }
  protected:
  explicit returnData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FuncFlat_2eproto);
    return ::descriptor_table_FuncFlat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExceptionFieldNumber = 2,
    kStartTimeFieldNumber = 3,
    kCompleteTimeFieldNumber = 4,
    kDllNameFieldNumber = 5,
    kFunctionNameFieldNumber = 6,
    kPassFailFieldNumber = 1,
  };
  // string exception = 2;
  void clear_exception();
  const std::string& exception() const;
  void set_exception(const std::string& value);
  void set_exception(std::string&& value);
  void set_exception(const char* value);
  void set_exception(const char* value, size_t size);
  std::string* mutable_exception();
  std::string* release_exception();
  void set_allocated_exception(std::string* exception);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_exception();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exception(
      std::string* exception);
  private:
  const std::string& _internal_exception() const;
  void _internal_set_exception(const std::string& value);
  std::string* _internal_mutable_exception();
  public:

  // string start_time = 3;
  void clear_start_time();
  const std::string& start_time() const;
  void set_start_time(const std::string& value);
  void set_start_time(std::string&& value);
  void set_start_time(const char* value);
  void set_start_time(const char* value, size_t size);
  std::string* mutable_start_time();
  std::string* release_start_time();
  void set_allocated_start_time(std::string* start_time);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_start_time();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_start_time(
      std::string* start_time);
  private:
  const std::string& _internal_start_time() const;
  void _internal_set_start_time(const std::string& value);
  std::string* _internal_mutable_start_time();
  public:

  // string complete_time = 4;
  void clear_complete_time();
  const std::string& complete_time() const;
  void set_complete_time(const std::string& value);
  void set_complete_time(std::string&& value);
  void set_complete_time(const char* value);
  void set_complete_time(const char* value, size_t size);
  std::string* mutable_complete_time();
  std::string* release_complete_time();
  void set_allocated_complete_time(std::string* complete_time);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_complete_time();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_complete_time(
      std::string* complete_time);
  private:
  const std::string& _internal_complete_time() const;
  void _internal_set_complete_time(const std::string& value);
  std::string* _internal_mutable_complete_time();
  public:

  // string dll_name = 5;
  void clear_dll_name();
  const std::string& dll_name() const;
  void set_dll_name(const std::string& value);
  void set_dll_name(std::string&& value);
  void set_dll_name(const char* value);
  void set_dll_name(const char* value, size_t size);
  std::string* mutable_dll_name();
  std::string* release_dll_name();
  void set_allocated_dll_name(std::string* dll_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dll_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dll_name(
      std::string* dll_name);
  private:
  const std::string& _internal_dll_name() const;
  void _internal_set_dll_name(const std::string& value);
  std::string* _internal_mutable_dll_name();
  public:

  // string function_name = 6;
  void clear_function_name();
  const std::string& function_name() const;
  void set_function_name(const std::string& value);
  void set_function_name(std::string&& value);
  void set_function_name(const char* value);
  void set_function_name(const char* value, size_t size);
  std::string* mutable_function_name();
  std::string* release_function_name();
  void set_allocated_function_name(std::string* function_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_function_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_function_name(
      std::string* function_name);
  private:
  const std::string& _internal_function_name() const;
  void _internal_set_function_name(const std::string& value);
  std::string* _internal_mutable_function_name();
  public:

  // bool passFail = 1;
  void clear_passfail();
  bool passfail() const;
  void set_passfail(bool value);
  private:
  bool _internal_passfail() const;
  void _internal_set_passfail(bool value);
  public:

  // @@protoc_insertion_point(class_scope:returnData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exception_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr complete_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dll_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr function_name_;
  bool passfail_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FuncFlat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FlatFunc

// string functionName = 1;
inline void FlatFunc::clear_functionname() {
  functionname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FlatFunc::functionname() const {
  // @@protoc_insertion_point(field_get:FlatFunc.functionName)
  return _internal_functionname();
}
inline void FlatFunc::set_functionname(const std::string& value) {
  _internal_set_functionname(value);
  // @@protoc_insertion_point(field_set:FlatFunc.functionName)
}
inline std::string* FlatFunc::mutable_functionname() {
  // @@protoc_insertion_point(field_mutable:FlatFunc.functionName)
  return _internal_mutable_functionname();
}
inline const std::string& FlatFunc::_internal_functionname() const {
  return functionname_.Get();
}
inline void FlatFunc::_internal_set_functionname(const std::string& value) {
  
  functionname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FlatFunc::set_functionname(std::string&& value) {
  
  functionname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FlatFunc.functionName)
}
inline void FlatFunc::set_functionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  functionname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FlatFunc.functionName)
}
inline void FlatFunc::set_functionname(const char* value,
    size_t size) {
  
  functionname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FlatFunc.functionName)
}
inline std::string* FlatFunc::_internal_mutable_functionname() {
  
  return functionname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FlatFunc::release_functionname() {
  // @@protoc_insertion_point(field_release:FlatFunc.functionName)
  return functionname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FlatFunc::set_allocated_functionname(std::string* functionname) {
  if (functionname != nullptr) {
    
  } else {
    
  }
  functionname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), functionname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FlatFunc.functionName)
}
inline std::string* FlatFunc::unsafe_arena_release_functionname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FlatFunc.functionName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return functionname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FlatFunc::unsafe_arena_set_allocated_functionname(
    std::string* functionname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (functionname != nullptr) {
    
  } else {
    
  }
  functionname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      functionname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FlatFunc.functionName)
}

// string dllName = 2;
inline void FlatFunc::clear_dllname() {
  dllname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FlatFunc::dllname() const {
  // @@protoc_insertion_point(field_get:FlatFunc.dllName)
  return _internal_dllname();
}
inline void FlatFunc::set_dllname(const std::string& value) {
  _internal_set_dllname(value);
  // @@protoc_insertion_point(field_set:FlatFunc.dllName)
}
inline std::string* FlatFunc::mutable_dllname() {
  // @@protoc_insertion_point(field_mutable:FlatFunc.dllName)
  return _internal_mutable_dllname();
}
inline const std::string& FlatFunc::_internal_dllname() const {
  return dllname_.Get();
}
inline void FlatFunc::_internal_set_dllname(const std::string& value) {
  
  dllname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FlatFunc::set_dllname(std::string&& value) {
  
  dllname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FlatFunc.dllName)
}
inline void FlatFunc::set_dllname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dllname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FlatFunc.dllName)
}
inline void FlatFunc::set_dllname(const char* value,
    size_t size) {
  
  dllname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FlatFunc.dllName)
}
inline std::string* FlatFunc::_internal_mutable_dllname() {
  
  return dllname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FlatFunc::release_dllname() {
  // @@protoc_insertion_point(field_release:FlatFunc.dllName)
  return dllname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FlatFunc::set_allocated_dllname(std::string* dllname) {
  if (dllname != nullptr) {
    
  } else {
    
  }
  dllname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dllname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FlatFunc.dllName)
}
inline std::string* FlatFunc::unsafe_arena_release_dllname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FlatFunc.dllName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dllname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FlatFunc::unsafe_arena_set_allocated_dllname(
    std::string* dllname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dllname != nullptr) {
    
  } else {
    
  }
  dllname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dllname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FlatFunc.dllName)
}

// string dllPath = 3;
inline void FlatFunc::clear_dllpath() {
  dllpath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FlatFunc::dllpath() const {
  // @@protoc_insertion_point(field_get:FlatFunc.dllPath)
  return _internal_dllpath();
}
inline void FlatFunc::set_dllpath(const std::string& value) {
  _internal_set_dllpath(value);
  // @@protoc_insertion_point(field_set:FlatFunc.dllPath)
}
inline std::string* FlatFunc::mutable_dllpath() {
  // @@protoc_insertion_point(field_mutable:FlatFunc.dllPath)
  return _internal_mutable_dllpath();
}
inline const std::string& FlatFunc::_internal_dllpath() const {
  return dllpath_.Get();
}
inline void FlatFunc::_internal_set_dllpath(const std::string& value) {
  
  dllpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FlatFunc::set_dllpath(std::string&& value) {
  
  dllpath_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FlatFunc.dllPath)
}
inline void FlatFunc::set_dllpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dllpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FlatFunc.dllPath)
}
inline void FlatFunc::set_dllpath(const char* value,
    size_t size) {
  
  dllpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FlatFunc.dllPath)
}
inline std::string* FlatFunc::_internal_mutable_dllpath() {
  
  return dllpath_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FlatFunc::release_dllpath() {
  // @@protoc_insertion_point(field_release:FlatFunc.dllPath)
  return dllpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FlatFunc::set_allocated_dllpath(std::string* dllpath) {
  if (dllpath != nullptr) {
    
  } else {
    
  }
  dllpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dllpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FlatFunc.dllPath)
}
inline std::string* FlatFunc::unsafe_arena_release_dllpath() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FlatFunc.dllPath)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dllpath_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FlatFunc::unsafe_arena_set_allocated_dllpath(
    std::string* dllpath) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dllpath != nullptr) {
    
  } else {
    
  }
  dllpath_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dllpath, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FlatFunc.dllPath)
}

// -------------------------------------------------------------------

// returnData

// bool passFail = 1;
inline void returnData::clear_passfail() {
  passfail_ = false;
}
inline bool returnData::_internal_passfail() const {
  return passfail_;
}
inline bool returnData::passfail() const {
  // @@protoc_insertion_point(field_get:returnData.passFail)
  return _internal_passfail();
}
inline void returnData::_internal_set_passfail(bool value) {
  
  passfail_ = value;
}
inline void returnData::set_passfail(bool value) {
  _internal_set_passfail(value);
  // @@protoc_insertion_point(field_set:returnData.passFail)
}

// string exception = 2;
inline void returnData::clear_exception() {
  exception_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& returnData::exception() const {
  // @@protoc_insertion_point(field_get:returnData.exception)
  return _internal_exception();
}
inline void returnData::set_exception(const std::string& value) {
  _internal_set_exception(value);
  // @@protoc_insertion_point(field_set:returnData.exception)
}
inline std::string* returnData::mutable_exception() {
  // @@protoc_insertion_point(field_mutable:returnData.exception)
  return _internal_mutable_exception();
}
inline const std::string& returnData::_internal_exception() const {
  return exception_.Get();
}
inline void returnData::_internal_set_exception(const std::string& value) {
  
  exception_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void returnData::set_exception(std::string&& value) {
  
  exception_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:returnData.exception)
}
inline void returnData::set_exception(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exception_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:returnData.exception)
}
inline void returnData::set_exception(const char* value,
    size_t size) {
  
  exception_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:returnData.exception)
}
inline std::string* returnData::_internal_mutable_exception() {
  
  return exception_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* returnData::release_exception() {
  // @@protoc_insertion_point(field_release:returnData.exception)
  return exception_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void returnData::set_allocated_exception(std::string* exception) {
  if (exception != nullptr) {
    
  } else {
    
  }
  exception_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exception,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:returnData.exception)
}
inline std::string* returnData::unsafe_arena_release_exception() {
  // @@protoc_insertion_point(field_unsafe_arena_release:returnData.exception)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return exception_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void returnData::unsafe_arena_set_allocated_exception(
    std::string* exception) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (exception != nullptr) {
    
  } else {
    
  }
  exception_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      exception, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:returnData.exception)
}

// string start_time = 3;
inline void returnData::clear_start_time() {
  start_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& returnData::start_time() const {
  // @@protoc_insertion_point(field_get:returnData.start_time)
  return _internal_start_time();
}
inline void returnData::set_start_time(const std::string& value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:returnData.start_time)
}
inline std::string* returnData::mutable_start_time() {
  // @@protoc_insertion_point(field_mutable:returnData.start_time)
  return _internal_mutable_start_time();
}
inline const std::string& returnData::_internal_start_time() const {
  return start_time_.Get();
}
inline void returnData::_internal_set_start_time(const std::string& value) {
  
  start_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void returnData::set_start_time(std::string&& value) {
  
  start_time_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:returnData.start_time)
}
inline void returnData::set_start_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:returnData.start_time)
}
inline void returnData::set_start_time(const char* value,
    size_t size) {
  
  start_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:returnData.start_time)
}
inline std::string* returnData::_internal_mutable_start_time() {
  
  return start_time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* returnData::release_start_time() {
  // @@protoc_insertion_point(field_release:returnData.start_time)
  return start_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void returnData::set_allocated_start_time(std::string* start_time) {
  if (start_time != nullptr) {
    
  } else {
    
  }
  start_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:returnData.start_time)
}
inline std::string* returnData::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:returnData.start_time)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return start_time_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void returnData::unsafe_arena_set_allocated_start_time(
    std::string* start_time) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (start_time != nullptr) {
    
  } else {
    
  }
  start_time_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      start_time, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:returnData.start_time)
}

// string complete_time = 4;
inline void returnData::clear_complete_time() {
  complete_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& returnData::complete_time() const {
  // @@protoc_insertion_point(field_get:returnData.complete_time)
  return _internal_complete_time();
}
inline void returnData::set_complete_time(const std::string& value) {
  _internal_set_complete_time(value);
  // @@protoc_insertion_point(field_set:returnData.complete_time)
}
inline std::string* returnData::mutable_complete_time() {
  // @@protoc_insertion_point(field_mutable:returnData.complete_time)
  return _internal_mutable_complete_time();
}
inline const std::string& returnData::_internal_complete_time() const {
  return complete_time_.Get();
}
inline void returnData::_internal_set_complete_time(const std::string& value) {
  
  complete_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void returnData::set_complete_time(std::string&& value) {
  
  complete_time_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:returnData.complete_time)
}
inline void returnData::set_complete_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  complete_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:returnData.complete_time)
}
inline void returnData::set_complete_time(const char* value,
    size_t size) {
  
  complete_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:returnData.complete_time)
}
inline std::string* returnData::_internal_mutable_complete_time() {
  
  return complete_time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* returnData::release_complete_time() {
  // @@protoc_insertion_point(field_release:returnData.complete_time)
  return complete_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void returnData::set_allocated_complete_time(std::string* complete_time) {
  if (complete_time != nullptr) {
    
  } else {
    
  }
  complete_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), complete_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:returnData.complete_time)
}
inline std::string* returnData::unsafe_arena_release_complete_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:returnData.complete_time)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return complete_time_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void returnData::unsafe_arena_set_allocated_complete_time(
    std::string* complete_time) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (complete_time != nullptr) {
    
  } else {
    
  }
  complete_time_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      complete_time, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:returnData.complete_time)
}

// string dll_name = 5;
inline void returnData::clear_dll_name() {
  dll_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& returnData::dll_name() const {
  // @@protoc_insertion_point(field_get:returnData.dll_name)
  return _internal_dll_name();
}
inline void returnData::set_dll_name(const std::string& value) {
  _internal_set_dll_name(value);
  // @@protoc_insertion_point(field_set:returnData.dll_name)
}
inline std::string* returnData::mutable_dll_name() {
  // @@protoc_insertion_point(field_mutable:returnData.dll_name)
  return _internal_mutable_dll_name();
}
inline const std::string& returnData::_internal_dll_name() const {
  return dll_name_.Get();
}
inline void returnData::_internal_set_dll_name(const std::string& value) {
  
  dll_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void returnData::set_dll_name(std::string&& value) {
  
  dll_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:returnData.dll_name)
}
inline void returnData::set_dll_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dll_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:returnData.dll_name)
}
inline void returnData::set_dll_name(const char* value,
    size_t size) {
  
  dll_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:returnData.dll_name)
}
inline std::string* returnData::_internal_mutable_dll_name() {
  
  return dll_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* returnData::release_dll_name() {
  // @@protoc_insertion_point(field_release:returnData.dll_name)
  return dll_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void returnData::set_allocated_dll_name(std::string* dll_name) {
  if (dll_name != nullptr) {
    
  } else {
    
  }
  dll_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dll_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:returnData.dll_name)
}
inline std::string* returnData::unsafe_arena_release_dll_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:returnData.dll_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dll_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void returnData::unsafe_arena_set_allocated_dll_name(
    std::string* dll_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dll_name != nullptr) {
    
  } else {
    
  }
  dll_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dll_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:returnData.dll_name)
}

// string function_name = 6;
inline void returnData::clear_function_name() {
  function_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& returnData::function_name() const {
  // @@protoc_insertion_point(field_get:returnData.function_name)
  return _internal_function_name();
}
inline void returnData::set_function_name(const std::string& value) {
  _internal_set_function_name(value);
  // @@protoc_insertion_point(field_set:returnData.function_name)
}
inline std::string* returnData::mutable_function_name() {
  // @@protoc_insertion_point(field_mutable:returnData.function_name)
  return _internal_mutable_function_name();
}
inline const std::string& returnData::_internal_function_name() const {
  return function_name_.Get();
}
inline void returnData::_internal_set_function_name(const std::string& value) {
  
  function_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void returnData::set_function_name(std::string&& value) {
  
  function_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:returnData.function_name)
}
inline void returnData::set_function_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  function_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:returnData.function_name)
}
inline void returnData::set_function_name(const char* value,
    size_t size) {
  
  function_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:returnData.function_name)
}
inline std::string* returnData::_internal_mutable_function_name() {
  
  return function_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* returnData::release_function_name() {
  // @@protoc_insertion_point(field_release:returnData.function_name)
  return function_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void returnData::set_allocated_function_name(std::string* function_name) {
  if (function_name != nullptr) {
    
  } else {
    
  }
  function_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), function_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:returnData.function_name)
}
inline std::string* returnData::unsafe_arena_release_function_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:returnData.function_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return function_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void returnData::unsafe_arena_set_allocated_function_name(
    std::string* function_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (function_name != nullptr) {
    
  } else {
    
  }
  function_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      function_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:returnData.function_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_FuncFlat_2eproto
